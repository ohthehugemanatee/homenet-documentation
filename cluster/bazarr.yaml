apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr
spec:
  selector:
    matchLabels:
      run: bazarr
  replicas: 1 
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        run: bazarr
    spec:
      volumes:
        - name: ramdisk
          emptyDir:
            medium: Memory
            sizeLimit: 400M
        - name: nfs
          persistentVolumeClaim:
            claimName: nfs-claim
        - emptyDir: {}
          name: bazarr-ramdisk-mount
      containers:
        - name: bazarr-config
          command:
            - sh
            - -c
            - |-
              dd if=/dev/zero of=/ramdisk/image.ext4 count=0 bs=1 seek=400M; \
              mkfs.ext4 /ramdisk/image.ext4; \
              mount /ramdisk/image.ext4 /mnt/bazarr-ramdisk-mount; \
              cp -fvpR /bazarr-config/* /mnt/bazarr-ramdisk-mount; \
              trap 'exit 0' 15; \
              while true; do \
              sleep 890; \
              sync /mnt/bazarr-ramdisk-mount/*; \
              fsfreeze --freeze /mnt/bazarr-ramdisk-mount; \
              sleep 10; \
              cp -fvp /mnt/bazarr-ramdisk-mount/*.* /bazarr-config/; \
              fsfreeze --unfreeze /mnt/bazarr-ramdisk-mount; \
              done;
          image: ubuntu
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                  - cp -fvp /mnt/bazarr-ramdisk-mount/*.* /bazarr-config/; \
                   umount /mnt/bazarr-ramdisk-mount;
          resources: {}
          securityContext:
            privileged: true
          volumeMounts:
            - name: ramdisk
              mountPath: /ramdisk
            - name: nfs
              mountPath: /bazarr-config
              subPath: ".docker/config/bazarr"
            - mountPath: /mnt/bazarr-ramdisk-mount
              mountPropagation: Bidirectional
              name: bazarr-ramdisk-mount
        - name: bazarr
          command:
            - sh
            - -c
            - until [ -f "/config/db/bazarr.db" ]; do sleep 1; done; /init
          image: linuxserver/bazarr
          ports:
            - containerPort: 6767
          env:
            - name: PGID
              value: "1000"
            - name: PUID
              value: "1000"
            - name: TZ
              value: "Europe/Berlin"
          volumeMounts:
            - mountPath: /config
              mountPropagation: HostToContainer
              name: bazarr-ramdisk-mount
            - name: nfs
              mountPath: "/downloads"
              subPath: "media/Downloads"
            - name: nfs
              mountPath: "/movies"
              subPath: "media/Movies"
            - name: nfs
              mountPath: "/tv"
              subPath: "media/TV Shows"

---

apiVersion: v1
kind: Service
metadata:
  name: bazarr
  labels:
    run: bazarr
spec:
  ports:
  - port: 6767
    protocol: TCP
  selector:
    run: bazarr

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: bazarr
spec:
  rules:
  - host: bazarr.cluster.vert
    http:
      paths:
      - path: /
        backend:
          serviceName: bazarr
          servicePort: 6767
  - host: bazarr.germany.vertesi.com
    http:
      paths:
      - path: /
        backend:
          serviceName: bazarr
          servicePort: 6767
  - host: bazarr.vert
    http:
      paths:
      - path: /
        backend:
          serviceName: bazarr
          servicePort: 6767

