apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
spec:
  selector:
    matchLabels:
      run: sonarr
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
        labels:
          run: sonarr
    spec:
      volumes:
        - name: ramdisk
          emptyDir:
            sizeLimit: 400M
        - name: nfs
          persistentVolumeClaim:
            claimName: nfs-claim
        - emptyDir: {}
          name: sonarr-ramdisk-mount
      containers:
        - name: sonarr-config
          image: ghcr.io/ohthehugemanatee/sidecar-sync:multiarch
          imagePullPolicy: Always
          resources: {}
          env:
            - name: SIZE
              value: '400M'
          securityContext:
            privileged: true
          volumeMounts:
            - name: ramdisk
              mountPath: /tmp/ramdisk
            - name: nfs
              mountPath: /tmp/durable-storage
              subPath: ".docker/config/sonarr"
            - name: sonarr-ramdisk-mount
              mountPath: /mnt/active-storage
              mountPropagation: Bidirectional
        - name: sonarr
          command:
            - sh
            - -c
            - until [ -f "/config/ready" ]; do sleep 1; done; /init
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: linuxserver/sonarr
          ports:
            - containerPort: 8989
              name: sonarr
              protocol: TCP
          volumeMounts:
            - mountPath: /config
              mountPropagation: HostToContainer
              name: sonarr-ramdisk-mount
            - name: nfs
              mountPath: /sonarr-config
              subPath: ".docker/config/sonarr"
            - name: nfs
              mountPath: "/downloads"
              subPath: "media/Downloads"
            - name: nfs
              mountPath: "/tv"
              subPath: "media/TV Shows"
            - name: nfs
              mountPath: "/data"
              subPath: "media/Downloads"
          livenessProbe:
            httpGet:
              path: /
              port: 8989
            initialDelaySeconds: 60
            periodSeconds: 30 
---

apiVersion: v1
kind: Service
metadata:
  name: sonarr
  labels:
    run: sonarr
spec:
  ports:
  - port: 8989
    protocol: TCP
  selector:
    run: sonarr

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sonarr
spec:
  rules:
  - host: sonarr.cluster.vert
    http:
      paths:
      - path: /
        backend:
          serviceName: sonarr
          servicePort: 8989
  - host: sonarr.vert
    http:
      paths:
      - path: /
        backend:
          serviceName: sonarr
          servicePort: 8989
